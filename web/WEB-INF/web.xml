<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">


        <welcome-file-list>
            <welcome-file>home</welcome-file>
        </welcome-file-list>

    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>

<!--
        <welcome-file-list>
            <welcome-file>signin</welcome-file>-->
                    <!-- mettra /signin en servletPath si l'uri de la requête entrante est juste l'uri du contexte de l'application
                     donc  /SGBD_0_war_exploded/
                     donc http://localhost:8080/SGBD_0_war_exploded/
                     reviendra au meme que
                     http://localhost:8080/SGBD_0_war_exploded/signin
                     meme si l'uri reste la même quand on fait request.getURI()

            <welcome-file>home.html</welcome-file>-->
                    <!-- prend le 1er qui repond dans les welcome-file -->
                    <!-- ici, que l'url soit :
                    http://localhost:8080/SGBD_0_war_exploded/
                    ou
                    http://localhost:8080/SGBD_0_war_exploded/home.html
                    renverra le meme welcome-file à savoir home.html
                    -->

<!--
        <filter>
            <filter-name>MyAuthenticationFilter</filter-name>
            <filter-class>com.main.schoolux.filters.MyAuthenticationFilter</filter-class>
        </filter>
        <filter-mapping>
            <filter-name>MyAuthenticationFilter</filter-name>
            <url-pattern>/*</url-pattern>
        </filter-mapping>
-->


        <jsp-config>
            <jsp-property-group>
                <url-pattern>/WEB-INF/views/*</url-pattern>
                <url-pattern> /WEB-INF/public/views/*</url-pattern>
                <include-prelude>/WEB-INF/includes/header.jsp</include-prelude>
                <include-coda>/WEB-INF/includes/footer.jsp</include-coda>
            </jsp-property-group>
            <jsp-property-group>
                <url-pattern>*.jsp</url-pattern>
                <page-encoding>UTF-8</page-encoding>
            </jsp-property-group>
        </jsp-config>



        <!-- Pour règler le problème des caractères non gérés quand on passe par un include du header -->
        <!-- Source : http://blog.pixelastic.com/2014/01/07/utf-8-encoding-included-jsp-files/ -->
        <!-- java.lang.IllegalArgumentException: <jsp-config> element is limited to 1 occurrence => obligé de remettre dans la balise <jsp-config> déjà existante-->
        <!--
        <jsp-config>
            <jsp-property-group>
                <url-pattern>*.jsp</url-pattern>
                <page-encoding>UTF-8</page-encoding>
            </jsp-property-group>
        </jsp-config>
        -->


    <!-- Pour include le footer et header  => fonctionne pas car le foother et header sont aussi des .jsp => boucle infinie-->
    <!--
    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <include-prelude>/public/JSP/includes/header.jsp</include-prelude>
            <include-coda>/public/JSP/includes/footer.jsp</include-coda>
        </jsp-property-group>
    </jsp-config>
    -->


    <!-- Examples -->
    <!--
        <jsp-property-group>
        <description>JSP configuration for the store front</description>
        <url-pattern>/index.jsp</url-pattern>
        <url-pattern>/WEB-INF/view/*</url-pattern>
        <url-pattern>/WEB-INF/jspf/error/*</url-pattern>
        <include-prelude>/WEB-INF/jspf/header.jspf</include-prelude>
        <include-coda>/WEB-INF/jspf/footer.jspf</include-coda>
    </jsp-property-group>
    <jsp-property-group>
        <description>JSP configuration for the admin console</description>
        <url-pattern>/admin/index.jsp</url-pattern>
        <url-pattern>/admin/login.jsp</url-pattern>
        <url-pattern>/admin/error.jsp</url-pattern>
        <include-prelude>/admin/jspf/header.jspf</include-prelude>
        <include-coda>/admin/jspf/footer.jspf</include-coda>
    </jsp-property-group>
    -->



    <!--
    Pas de mapping de servlet ici
    =>  A la creation de chacune des servlets, on coche "Create Java EE 8 annotated class
    Cela ajoutera une annotation @WebServlet(name="") qui remplace le mapping d'ici

    Dans le cas où on fait les 2 par erreur, c'est le web.xml qui sera prioritaire par rapport aux annotations.

    Exemple à l'ancienne :


            <servlet>
                <servlet-name>NomDeMaServlet</servlet-name>
                <servlet-class> com.main.schoolux.servlets.ClasseLiéeAuNomDeServlet</servlet-class>
            </servlet>

            <servlet-mapping>
                <servlet-name>NomDeMaServlet</servlet-name>
                <url-pattern>/UnMotEnRapportAvecLeNomDeLaServlet</url-pattern>
            </servlet-mapping>

    Fin exemple
     -->
    


</web-app>








