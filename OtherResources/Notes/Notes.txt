
=====================================================
A l'import mappant les tables de la db en classes
======================================================

En SQL, on utilise des tiny int (1) pour simuler un boolean
Le mapping transforme ce type en byte alors qu il faut le java type boolean


Pour les enum, mettre le type java.lang.String et pas Object

Mettre tous les noms de classes au singulier
Vérifier le camelcase pour tous les noms de champs



Tous les id de foreign keys qui sont nullables doivent être en java.lang.Integer
vu qu'un simple int ne peut pas être NULL, il faut utiliser la classe enveloppe Integer
=> finalement on décoche les id de clés étrangères, on garde que les collections



Décocher les collections de classe représentant des tables pas encore gérées par le groupe


Une fois les classés générées, aller dans chacune rajouter l'annotation
@GeneratedValue(strategy = GenerationType.IDENTITY)
en dessous de chaque annotation @Id



vérifier dans persistence.xml que les balises <class> se sont bien rajoutées automatiquement
comme le modèle suivant : <class>package.name.class</class>

		<class>com.persistence.entities.PermissionEntity</class>
		<class>com.persistence.entities.RoleEntity</class>
		<class>com.persistence.entities.RolePermissionEntity</class>
		<class>com.persistence.entities.UserEntity</class>







============================================================
Obtenir un logger
============================================================

Le fichier log4j.properties doit se trouver dans racine du dossier "src". (voir Log4j.pdf)
Mettre LOG en maj et pas log car final signifie que c'est une constante => convention

private final static Logger LOG = Logger.getLogger(NomDeLaClasse.class);

afficher un msg =>
LOG.info("monMessage");
ou
LOG.log(Level.INFO, "monMessage");*/

================================================================
Entourer automatiquement du code par une structure récurrente
================================================================
Selectionner le code à entourer
ctrl + alt + T
les templates de surroundings sont éditables
https://www.jetbrains.com/help/idea/surrounding-blocks-of-code-with-language-constructs.html

=============================================
Le MyGlobalListener
==============================================
Vraiment un truc à mettre en place car ça simplifie beaucoup le logging
On peut voir automatiquement ce qu'il se passe en session etc grâce à des events générés par les classes importées
Simple à mettre en place et efficace



=============================================
Avoir une classe de test sans lancer toute l'appli
=============================================

créer une classe test dans le dossier src
Il faut impérativement qu'elle comporte une méthode  <public static void main>

public class test {

    public static void main(String[] args){

        System.out.println("Hello World");

    }
}


Clic droit sur la classe => run test.main()
On peut aussi choisir de run uniquement une méthode en cliquant sur le nom de la méthode dans le fichier

Remarque : il faut que le dossier src soit Source Root
=> clic droit sur le dossier src => mark Directory as => Sources Root


==================
Structure reflexion
===================

signin servlet
signup servlet pour l  inscription only
accountServlet pour gerer son compte genre /myAccount

userManagingServlet pour gérer les utilisateurs
où là on vérifierait le rôle à l'appel du get de la servlet
si c bien un admin, il peut continuer

on fait le bail du check de l'url substring
/list => return usersList.jsp
/edit => à partir de la liste, on a cliquer sur un bouton éditer à coté d un user,
return userInfos.jsp qui une fois éditer et submit en post repart vers /users/edit
donc faire methode post avec aussi le substring dans la servlet

/delete => à partir de la liste on a cliqué sur delete user









